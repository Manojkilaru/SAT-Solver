--This is a random testcase generated by using a python code. (In our system the sat became 0 at t = 20,155ns). 
--The output is "1111111111111111111111111111111111111111111111011111111111111111".

--------------------------------------------------------------------------------
-- Company: 
-- Engineer:
--
-- Create Date:   23:38:30 04/06/2016
-- Design Name:   
-- Module Name:   C:/Users/chanukya/Desktop/Xilinx/SATSolver/Pirates_testbench5.vhd
-- Project Name:  SATSolver
-- Target Device:  
-- Tool versions:  
-- Description:   
-- 
-- VHDL Test Bench Created by ISE for module: Input
-- 
-- Dependencies:
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
--
-- Notes: 
-- This testbench has been automatically generated using types std_logic and
-- std_logic_vector for the ports of the unit under test.  Xilinx recommends
-- that these types always be used for the top-level I/O of a design in order
-- to guarantee that the testbench will bind correctly to the post-implementation 
-- simulation model.
--------------------------------------------------------------------------------
LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY Pirates_testbench5 IS
END Pirates_testbench5;
 
ARCHITECTURE behavior OF Pirates_testbench5 IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT Input
    PORT(
         clock : IN  std_logic;
         reset : IN  std_logic;
         clause : IN  std_logic_vector(63 downto 0);
         load : IN  std_logic;
         SAT : INOUT  std_logic;
         output : INOUT  std_logic_vector(63 downto 0)
        );
    END COMPONENT;
    

   --Inputs
   signal clock : std_logic := '0';
   signal reset : std_logic := '0';
   signal clause : std_logic_vector(63 downto 0) := (others => '0');
   signal load : std_logic := '0';

	--BiDirs
   signal SAT : std_logic;
   signal output : std_logic_vector(63 downto 0);

   -- Clock period definitions
   constant clock_period : time := 10 ns;
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: Input PORT MAP (
          clock => clock,
          reset => reset,
          clause => clause,
          load => load,
          SAT => SAT,
          output => output
        );

   -- Clock process definitions
   clock_process :process
   begin
		clock <= '0';
		wait for clock_period/2;
		clock <= '1';
		wait for clock_period/2;
   end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;
		reset <= '1';
		wait for 2*clock_period;
		reset <= '0';
			load<='1';
		clause<="0001000000100000001000000000101101100110001000000000001001010000";
		wait for clock_period;
	load<='1';
		clause<="0000100111011100000000000000000000000001010110100010000100000010";
		wait for clock_period;
	load<='1';
		clause<="0000111001000001101011000000100111000000011010000100000110110001";
		wait for clock_period;
	load<='1';
		clause<="1101000100100010000100000011000000111000100000000010000000001100";
		wait for clock_period;
	load<='1';
		clause<="0000000000000000000000100000000000000100000000001000000000000000";
		wait for clock_period;
	load<='1';
		clause<="0000000000001000000000010000000000000001000000000000000100001000";
		wait for clock_period;
	load<='1';
		clause<="0000100010000111000100000111000010000001011000000010001010100000";
		wait for clock_period;
	load<='1';
		clause<="1011000101001000010011011000110101101110100101011000010000000110";
		wait for clock_period;
	load<='1';
		clause<="0001000000000000001010000010010010001000000000110101000100000100";
		wait for clock_period;
	load<='1';
		clause<="0110010101001101000000010000000100100101000000000000000011010001";
		wait for clock_period;
	load<='1';
		clause<="0000000000000001000000000000000000000000100010000000000000000000";
		wait for clock_period;
	load<='1';
		clause<="0000001000000000000000000010000000000000000000010000100000000010";
		wait for clock_period;
	load<='1';
		clause<="0010000000000000000000000000100100000000000010000000000010001001";
		wait for clock_period;
	load<='1';
		clause<="0000010010000001000001000000000000001000000100011000000001100000";
		wait for clock_period;
	load<='1';
		clause<="0000000000000000000000000000000000000000000000000000000000000000";
		wait for clock_period;
	load<='1';
		clause<="0000000000000000000000000000000000000000000000100000000000000000";
		wait for clock_period;
	load<='1';
		clause<="0000100010110000100001000111101110000001110010000011001110100101";
		wait for clock_period;
	load<='1';
		clause<="0101011000001111001010111000010001110010001101111100110001011010";
		wait for clock_period;
	load<='1';
		clause<="0010101001000110110100001000100100000011011010001001100010000101";
		wait for clock_period;
	load<='1';
		clause<="1001010110000001000001110111010010010000000000000010011100001000";
		wait for clock_period;

		load<='0';

      wait;
   end process;

END;
